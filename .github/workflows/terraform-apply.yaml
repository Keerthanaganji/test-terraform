name: Terraform Apply

on:
 workflow_dispatch:
# push:
#    branches:
#      - infrastructure/dev
#      - infrastructure/test
#      - infrastructure/pre-prod
#      - infrastructure/prod
   

jobs:
  deploy_dev:
    name: Deploy to Dev
    if: github.ref == 'refs/heads/infrastructure/dev'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

        
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
       role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
       aws-region: eu-west-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    - name: Terraform Init
      run: |
        pwd
        cd terraform/environments/dev
        pwd
        terraform init \
          -input=false 

    - name: Terraform Plan
      run: |
        pwd
        cd terraform/environments/dev 
        terraform plan -var-file=dev.tfvars -out=dev.tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/dev
        terraform apply -auto-approve dev.tfplan



  deploy_test:
    name: Deploy to Test
    if: github.ref == 'refs/heads/infrastructure/test'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
       role-to-assume: ${{ secrets.AWS_TEST_GITHUB_ACTION_ROLE }}
       aws-region: eu-west-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    - name: Terraform Init
      run: |
        pwd
        cd terraform/environments/test
        pwd
        terraform init \
          -input=false 

    - name: Terraform Plan
      run: |
        pwd
        cd terraform/environments/test 
        terraform plan -var-file=test.tfvars -out=test.tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/test
        terraform apply -auto-approve test.tfplan

  deploy_pre_prod:
    name: Deploy to Pre Prod
    if: github.ref == 'refs/heads/infrastructure/pre-prod'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
       role-to-assume: ${{ secrets.AWS_PRE_PROD_GITHUB_ACTION_ROLE }}
       aws-region: eu-west-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    - name: Terraform Init
      run: |
        pwd
        cd terraform/environments/pre-prod
        pwd
        terraform init \
          -input=false 

    - name: Terraform Plan
      run: |
        pwd
        cd terraform/environments/pre-prod 
        terraform plan -var-file=pre-prod.tfvars -out=pre-prod.tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/pre-prod
        terraform apply -auto-approve pre-prod.tfplan

  deploy_prod:
    name: Deploy to Prod
    if: github.ref == 'refs/heads/infrastructure/prod'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
  
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with: 
       role-to-assume: ${{ secrets.AWS_PROD_GITHUB_ACTION_ROLE }}
       aws-region: eu-west-1

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.0

    - name: Terraform Init
      run: |
        pwd
        cd terraform/environments/prod
        pwd
        terraform init \
          -input=false 

    - name: Terraform Plan
      run: |
        pwd
        cd terraform/environments/prod
        terraform plan -var-file=prod.tfvars -out=prod.tfplan

    - name: Terraform Apply
      run: |
        cd terraform/environments/prod
        terraform apply -auto-approve prod.tfplan
